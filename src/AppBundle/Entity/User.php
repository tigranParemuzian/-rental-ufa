<?php

namespace AppBundle\Entity;

use AppBundle\Traits\File;
use AppBundle\Traits\GedmoInfos;
use Doctrine\ORM\Mapping as ORM;
use FOS\UserBundle\Entity\User as BaseUser;
use JMS\Serializer\Annotation\Groups;
use JMS\Serializer\Annotation\VirtualProperty;
use Symfony\Bridge\Doctrine\Validator\Constraints\UniqueEntity;
use Symfony\Component\Validator\Constraints as Assert;
use Symfony\Component\Validator\Context\ExecutionContext;
use Symfony\Component\Validator\Context\ExecutionContextInterface;
use Gedmo\Mapping\Annotation as Gedmo;

/**
 *
 * @ORM\Table(name="fos_user")
 * @ORM\Entity(repositoryClass="AppBundle\Repository\UserRepository")
 * @ORM\HasLifecycleCallbacks()
 * @UniqueEntity("phone")
 */
class User extends BaseUser
{
    use File, GedmoInfos;

    /**
     * @ORM\Id
     * @ORM\Column(type="integer")
     * @ORM\GeneratedValue(strategy="AUTO")
     * @Groups({"booking_history", "user-info"})
     *
     */
    protected $id;

    /**
     * @var
     * @ORM\Column(name="first_name", type="string", nullable=true)
     * @Groups({"user-info", "booking_list"})
     */
    private $firstName;

    /**
     * @var
     * @ORM\Column(name="last_name", type="string", nullable=true)
     * @Groups({"user-info", "booking_list"})
     */
    private $lastName;

    /**
     * @var
     * @ORM\Column(name="patronymic", type="string", nullable=true)
     * @Groups({"user-info", "booking_list"})
     */
    private $patronymic;

    /**
     * @var
     * @ORM\Column(name="contract", type="string", length=255, nullable=true)
     */
    private $contract;

    /**
     * @var
     * @ORM\Column(name="contract_cost", type="string", length=255, nullable=true)
     */
    private $contractCost;

    /**
     * @var
     * @ORM\Column(name="payment_date", type="datetime", nullable=true)
     */
    private $paymentDate;

    /**
     * @var
     * @ORM\Column(name="inhabited", type="boolean", options={"default":0})
     */
    private $inhabited=false;

    /**
     * @var
     * @ORM\Column(name="database_permission", type="boolean", options={"default":0})
     */
    private $databasePermission=false;

    /**
     * @var
     * @ORM\Column(name="sent_password", type="boolean", options={"default":0})
     */
    private $sentPassword=false;

    /**
     * @var
     * @ORM\Column(name="problematic", type="boolean", options={"default":0})
     */
    private $problematic=false;

    /**
     * @var
     * @ORM\Column(name="price_from", type="integer", options={"default":0})
     */
    private $priceFrom=0;

    /**
     * @var
     * @ORM\Column(name="price_to", type="integer")
     */
    private $priceTo=0;

    /**
     * @var
     * @ORM\Column(name="phone", type="string", length=20 , nullable=false, unique=true)
     * @Assert\NotBlank(message="user.phone.not_blank", groups={"Registration", "Profile"})
     * @Assert\Length(
     *     min=9,
     *     max=13,
     *     minMessage="user.phone.minLength",
     *     maxMessage="user.phone.maxLength",
     *     groups={"Registration", "Profile"}
     * )
     * @Groups({"user-info", "booking_list"})
     */
    private $phone;


    /**
     * @var
     * @ORM\ManyToMany(targetEntity="AppBundle\Entity\Regions", inversedBy="user")
     * @ORM\JoinTable(name="region_user",
     *      joinColumns={ @ORM\JoinColumn(name="region_id", referencedColumnName="id") },
     *      inverseJoinColumns={@ORM\JoinColumn(name="user_id", referencedColumnName="id")})
     * )
     */
    private $regions;

    /**
     * @var
     * @ORM\ManyToMany(targetEntity="AppBundle\Entity\Types", inversedBy="user")
     * @ORM\JoinTable(name="type_user",
     *      joinColumns={ @ORM\JoinColumn(name="type_id", referencedColumnName="id") },
     *      inverseJoinColumns={@ORM\JoinColumn(name="user_id", referencedColumnName="id")})
     * )
     */
    private $types;

    /**
     * @var
     * @ORM\OneToMany(targetEntity="AppBundle\Entity\Ads", mappedBy="author")
     */
    private $ads;

    /**
     * @var
     * @ORM\Column(name="manager_name", type="string", length=255, nullable=true)
     */
    private $manager;

    public function __toString()
    {
        return $this->id ? $this->firstName . ' ' . $this->lastName : '';
//        return parent::__toString(); // TODO: Change the autogenerated stub
    }

    public function __construct()
    {
        parent::__construct();
        $this->regions = new \Doctrine\Common\Collections\ArrayCollection();
        $this->types = new \Doctrine\Common\Collections\ArrayCollection();
        $this->ads = new \Doctrine\Common\Collections\ArrayCollection();

    }

    /**
     * @VirtualProperty()
     *
     * @Groups({"user-info", "booking_list"})
     */
    public function getClientFullName() {

        return $this->firstName . ' ' . $this->lastName;
    }

    /**
     * Set firstName
     *
     * @param string $firstName
     *
     * @return User
     */
    public function setFirstName($firstName)
    {
        $this->firstName = $firstName;

        return $this;
    }

    /**
     * Get firstName
     *
     * @return string
     */
    public function getFirstName()
    {
        return $this->firstName;
    }

    /**
     * Set lastName
     *
     * @param string $lastName
     *
     * @return User
     */
    public function setLastName($lastName)
    {
        $this->lastName = $lastName;

        return $this;
    }

    /**
     * Get lastName
     *
     * @return string
     */
    public function getLastName()
    {
        return $this->lastName;
    }

    /**
     * Set patronymic
     *
     * @param string $patronymic
     *
     * @return User
     */
    public function setPatronymic($patronymic)
    {
        $this->patronymic = $patronymic;

        return $this;
    }

    /**
     * Get patronymic
     *
     * @return string
     */
    public function getPatronymic()
    {
        return $this->patronymic;
    }

    /**
     * Set contract
     *
     * @param string $contract
     *
     * @return User
     */
    public function setContract($contract)
    {
        $this->contract = $contract;

        return $this;
    }

    /**
     * Get contract
     *
     * @return string
     */
    public function getContract()
    {
        return $this->contract;
    }

    /**
     * Set contractCost
     *
     * @param string $contractCost
     *
     * @return User
     */
    public function setContractCost($contractCost)
    {
        $this->contractCost = $contractCost;

        return $this;
    }

    /**
     * Get contractCost
     *
     * @return string
     */
    public function getContractCost()
    {
        return $this->contractCost;
    }

    /**
     * Set paymentDate
     *
     * @param \DateTime $paymentDate
     *
     * @return User
     */
    public function setPaymentDate($paymentDate)
    {
        $this->paymentDate = $paymentDate;

        return $this;
    }

    /**
     * Get paymentDate
     *
     * @return \DateTime
     */
    public function getPaymentDate()
    {
        return $this->paymentDate;
    }

    /**
     * Set inhabited
     *
     * @param boolean $inhabited
     *
     * @return User
     */
    public function setInhabited($inhabited)
    {
        $this->inhabited = $inhabited;

        return $this;
    }

    /**
     * Get inhabited
     *
     * @return boolean
     */
    public function getInhabited()
    {
        return $this->inhabited;
    }

    /**
     * Set databasePermission
     *
     * @param boolean $databasePermission
     *
     * @return User
     */
    public function setDatabasePermission($databasePermission)
    {
        $this->databasePermission = $databasePermission;

        return $this;
    }

    /**
     * Get databasePermission
     *
     * @return boolean
     */
    public function getDatabasePermission()
    {
        return $this->databasePermission;
    }

    /**
     * Set sentPassword
     *
     * @param boolean $sentPassword
     *
     * @return User
     */
    public function setSentPassword($sentPassword)
    {
        $this->sentPassword = $sentPassword;

        return $this;
    }

    /**
     * Get sentPassword
     *
     * @return boolean
     */
    public function getSentPassword()
    {
        return $this->sentPassword;
    }

    /**
     * Set problematic
     *
     * @param boolean $problematic
     *
     * @return User
     */
    public function setProblematic($problematic)
    {
        $this->problematic = $problematic;

        return $this;
    }

    /**
     * Get problematic
     *
     * @return boolean
     */
    public function getProblematic()
    {
        return $this->problematic;
    }

    /**
     * Set phone
     *
     * @param string $phone
     *
     * @return User
     */
    public function setPhone($phone)
    {
        $this->phone = $phone;

        return $this;
    }

    /**
     * Get phone
     *
     * @return string
     */
    public function getPhone()
    {
        return $this->phone;
    }

    /**
     * @return mixed
     */
    public function getPriceFrom()
    {
        return $this->priceFrom;
    }

    /**
     * @param mixed $priceFrom
     */
    public function setPriceFrom($priceFrom)
    {
        $this->priceFrom = $priceFrom;
    }

    /**
     * @return mixed
     */
    public function getPriceTo()
    {
        return $this->priceTo;
    }

    /**
     * @param mixed $priceTo
     */
    public function setPriceTo($priceTo)
    {
        $this->priceTo = $priceTo;
    }

    /**
     * Add region
     *
     * @param \AppBundle\Entity\Regions $region
     *
     * @return User
     */
    public function addRegion(\AppBundle\Entity\Regions $region)
    {
        $this->regions[] = $region;

        return $this;
    }

    /**
     * Remove region
     *
     * @param \AppBundle\Entity\Regions $region
     */
    public function removeRegion(\AppBundle\Entity\Regions $region)
    {
        $this->regions->removeElement($region);
    }

    /**
     * Get regions
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getRegions()
    {
        return $this->regions;
    }

    /**
     * Add type
     *
     * @param \AppBundle\Entity\Types $type
     *
     * @return User
     */
    public function addType(\AppBundle\Entity\Types $type)
    {
        $this->types[] = $type;

        return $this;
    }

    /**
     * Remove type
     *
     * @param \AppBundle\Entity\Types $type
     */
    public function removeType(\AppBundle\Entity\Types $type)
    {
        $this->types->removeElement($type);
    }

    /**
     * Get types
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getTypes()
    {
        return $this->types;
    }

    /**
     * Add ad
     *
     * @param \AppBundle\Entity\Ads $ad
     *
     * @return User
     */
    public function addAd(\AppBundle\Entity\Ads $ad)
    {
        $this->ads[] = $ad;

        return $this;
    }

    /**
     * Remove ad
     *
     * @param \AppBundle\Entity\Ads $ad
     */
    public function removeAd(\AppBundle\Entity\Ads $ad)
    {
        $this->ads->removeElement($ad);
    }

    /**
     * Get ads
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getAds()
    {
        return $this->ads;
    }

    /**
     * Set manager
     *
     * @param \AppBundle\Entity\User $manager
     *
     * @return User
     */
    public function setManager($manager = null)
    {
        $this->manager = $manager;

        return $this;
    }

    /**
     * Get manager
     *
     * @return \AppBundle\Entity\User
     */
    public function getManager()
    {
        return $this->manager;
    }
}
